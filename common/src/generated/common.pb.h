/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_COMMON_COMMON_PB_H_INCLUDED
#define PB_COMMON_COMMON_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _common_client {
    bool has_name;
    char name[16];
    bool has_id;
    uint32_t id;
} common_client;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define common_client_init_default               {false, "", false, 0}
#define common_client_init_zero                  {false, "", false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define common_client_name_tag                   1
#define common_client_id_tag                     2

/* Struct field encoding specification for nanopb */
#define common_client_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   id,                2)
#define common_client_CALLBACK NULL
#define common_client_DEFAULT NULL

extern const pb_msgdesc_t common_client_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define common_client_fields &common_client_msg

/* Maximum encoded size of messages (where known) */
#define COMMON_COMMON_PB_H_MAX_SIZE              common_client_size
#define common_client_size                       23

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
