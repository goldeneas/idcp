/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_C2C_PACKETS_PB_H_INCLUDED
#define PB_C2C_PACKETS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _message_packet {
    bool has_text;
    char text[255];
    bool has_size;
    uint32_t size;
} message_packet;

typedef struct _c2c_envelope {
    pb_size_t which_payload;
    union {
        message_packet message;
    } payload;
} c2c_envelope;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define message_packet_init_default              {false, "", false, 0}
#define c2c_envelope_init_default                {0, {message_packet_init_default}}
#define message_packet_init_zero                 {false, "", false, 0}
#define c2c_envelope_init_zero                   {0, {message_packet_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define message_packet_text_tag                  1
#define message_packet_size_tag                  2
#define c2c_envelope_message_tag                 1

/* Struct field encoding specification for nanopb */
#define message_packet_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, STRING,   text,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   size,              2)
#define message_packet_CALLBACK NULL
#define message_packet_DEFAULT NULL

#define c2c_envelope_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,message,payload.message),   1)
#define c2c_envelope_CALLBACK NULL
#define c2c_envelope_DEFAULT NULL
#define c2c_envelope_payload_message_MSGTYPE message_packet

extern const pb_msgdesc_t message_packet_msg;
extern const pb_msgdesc_t c2c_envelope_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define message_packet_fields &message_packet_msg
#define c2c_envelope_fields &c2c_envelope_msg

/* Maximum encoded size of messages (where known) */
#define C2C_PACKETS_PB_H_MAX_SIZE                c2c_envelope_size
#define c2c_envelope_size                        266
#define message_packet_size                      263

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
