/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_D2C_PACKETS_PB_H_INCLUDED
#define PB_D2C_PACKETS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _motd_packet {
    char serverName[256];
    pb_callback_t motd;
    uint32_t connectedClients;
} motd_packet;

typedef struct _d2c_envelope {
    pb_size_t which_payload;
    union {
        motd_packet motd;
    } payload;
} d2c_envelope;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define motd_packet_init_default                 {"", {{NULL}, NULL}, 0}
#define d2c_envelope_init_default                {0, {motd_packet_init_default}}
#define motd_packet_init_zero                    {"", {{NULL}, NULL}, 0}
#define d2c_envelope_init_zero                   {0, {motd_packet_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define motd_packet_serverName_tag               1
#define motd_packet_motd_tag                     2
#define motd_packet_connectedClients_tag         3
#define d2c_envelope_motd_tag                    1

/* Struct field encoding specification for nanopb */
#define motd_packet_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, STRING,   serverName,        1) \
X(a, CALLBACK, REQUIRED, STRING,   motd,              2) \
X(a, STATIC,   REQUIRED, UINT32,   connectedClients,   3)
#define motd_packet_CALLBACK pb_default_field_callback
#define motd_packet_DEFAULT NULL

#define d2c_envelope_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,motd,payload.motd),   1)
#define d2c_envelope_CALLBACK NULL
#define d2c_envelope_DEFAULT NULL
#define d2c_envelope_payload_motd_MSGTYPE motd_packet

extern const pb_msgdesc_t motd_packet_msg;
extern const pb_msgdesc_t d2c_envelope_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define motd_packet_fields &motd_packet_msg
#define d2c_envelope_fields &d2c_envelope_msg

/* Maximum encoded size of messages (where known) */
/* motd_packet_size depends on runtime parameters */
/* d2c_envelope_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
